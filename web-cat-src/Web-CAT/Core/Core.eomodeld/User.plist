{
    attributes = (
        {
            allowsNull = N;
            columnName = CACCESSLEVEL;
            name = accessLevel;
            prototypeName = tinyInteger;
            userInfo = {
                isScalar = true;
                scalarConversionMethodName = byteValue;
                scalarDefault = 0;
                type = byte;
                valueClassName = Byte;
            };
        },
        {
            allowsNull = N;
            columnName = CAUTHENTICATIONDOMAINID;
            name = authenticationDomainId;
            prototypeName = foreignId;
        },
        {columnName = CEMAIL; name = email; prototypeName = tinyText; },
        {columnName = CFIRSTNAME; name = firstName; prototypeName = tinyText; },
        {name = id; prototypeName = id; },
        {columnName = CLASTNAME; name = lastName; prototypeName = tinyText; },
        {name = password; prototypeName = password; },
        {
            columnName = CPREFERENCES;
            name = preferences;
            prototypeName = mutableDictionary;
            userInfo = {
                adaptorValueConversionMethodName = archiveData;
                isMutable = true;
                valueClassName = "org.webcat.core.MutableDictionary";
                valueFactoryMethodName = objectWithArchiveData;
            };
        },
        {columnName = CTHEMEID; name = themeId; prototypeName = foreignId; },
        {
            columnName = CUNIVERSITYIDNO;
            name = universityIDNo;
            prototypeName = tinyText;
        },
        {
            name = updateMutableFields;
            prototypeName = updateMutableFields;
            userInfo = {isScalar = true; scalarDefault = false; type = boolean; };
        },
        {columnName = URL; name = url; prototypeName = tinyText; },
        {name = userName; prototypeName = userName; }
    );
    attributesUsedForLocking = (
        accessLevel,
        authenticationDomainId,
        email,
        firstName,
        lastName,
        password,
        preferences,
        themeId,
        universityIDNo,
        updateMutableFields,
        url,
        userName
    );
    className = "org.webcat.core.User";
    classProperties = (
        accessLevel,
        authenticationDomain,
        coreSelections,
        email,
        enrolledIn,
        firstName,
        lastName,
        password,
        passwordChangeRequest,
        preferences,
        teaching,
        theme,
        universityIDNo,
        updateMutableFields,
        url,
        userName,
        graderFor,
        sentMessages,
        usagePeriods
    );
    externalName = TUSER;
    name = User;
    primaryKeyAttributes = (id);
    relationships = (
        {
            destination = AuthenticationDomain;
            isMandatory = Y;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id; sourceAttribute = authenticationDomainId; });
            name = authenticationDomain;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = CoreSelections;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = userId; sourceAttribute = id; });
            name = coreSelections;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = CourseStudent;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id1; sourceAttribute = id; });
            name = courseOfferingUsers;
            propagatesPrimaryKey = Y;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = InstructorCourse;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id1; sourceAttribute = id; });
            name = courseOfferingUsers1;
            propagatesPrimaryKey = Y;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = CourseTA;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id1; sourceAttribute = id; });
            name = courseOfferingUsers2;
            propagatesPrimaryKey = Y;
        },
        {
            definition = "courseOfferingUsers.courseOffering";
            name = enrolledIn;
            numberOfToManyFaultsToBatchFetch = 10;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = PasswordChangeRequest;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = userId; sourceAttribute = id; });
            name = passwordChangeRequest;
        },
        {
            definition = "courseOfferingUsers1.courseOffering";
            name = teaching;
            numberOfToManyFaultsToBatchFetch = 10;
        },
        {
            definition = "courseOfferingUsers2.courseOffering";
            name = graderFor;
            numberOfToManyFaultsToBatchFetch = 10;
        },
        {
            destination = Theme;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id; sourceAttribute = themeId; });
            name = theme;
        },
        {definition = "userSentMessages.sentMessage"; name = sentMessages; },
        {
            deleteRule = EODeleteRuleCascade;
            destination = UserSentMessage;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = userId; sourceAttribute = id; });
            name = userSentMessages;
            propagatesPrimaryKey = Y;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = UsagePeriod;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = userId; sourceAttribute = id; });
            name = usagePeriods;
        }
    );
}
