/*==========================================================================*\
 |  $Id: SubmissionEngine.cs,v 1.2 2008/12/12 01:41:40 aallowat Exp $
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of the Web-CAT Electronic Submission engine for the
 |	.NET framework.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Reflection;
using WebCAT.Submitter.Utility;
using WebCAT.Submitter.Internal;

namespace WebCAT.Submitter
{
	/// <summary>
	/// The main class that implements the electronic submission engine.
	/// </summary>
	public class SubmissionEngine
	{
		//  -------------------------------------------------------------------
		/// <summary>
		/// Gets the root object of the submission target tree.
		/// </summary>
		public ITargetRoot Root
		{
			get
			{
				return root;
			}
		}


		//  -------------------------------------------------------------------
		/// <summary>
		/// Reads the submission target definitions from the specified URI.
		/// </summary>
		/// <param name="definitionsUri">
		/// A URI that points to the submission target definitions to load.
		/// </param>
		public void OpenDefinitions(Uri definitionsUri)
		{
			WebRequest request = null;
			Stream stream = null;

			try
			{
				request = WebRequest.Create(definitionsUri);
				WebResponse response = request.GetResponse();
				stream = response.GetResponseStream();

				OpenFromStream(stream);
			}
			catch (Exception e)
			{
				throw e;
			}
			finally
			{
				if(stream != null)
					stream.Close();
			}
		}


		//  -------------------------------------------------------------------
		private void OpenFromStream(Stream stream)
		{
			Stream schemaStream = Assembly.GetExecutingAssembly().
				GetManifestResourceStream(
				"WebCAT.Submitter.Schema.submission-targets.xsd");

			XmlReaderSettings settings = new XmlReaderSettings();
			XmlSchema schema = XmlSchema.Read(schemaStream, null);
			settings.Schemas.Add(schema);
			settings.ValidationType = ValidationType.Schema;

			XmlReader reader = XmlReader.Create(stream, settings);
			XmlDocument document = new XmlDocument();

			document.Load(reader);

			root = new Internal.TargetRoot();
			root.Parse(document.DocumentElement);
		}


		//  -------------------------------------------------------------------
		/// <summary>
		/// Gets a value indicating whether the last submission generated a
		/// response.
		/// </summary>
		public bool HasResponse
		{
			get
			{
				return hasResponse;
			}
		}


		//  -------------------------------------------------------------------
		/// <summary>
		/// Gets the string content of the response generated by the last
		/// submission, if one was generated.
		/// </summary>
		public string SubmissionResponse
		{
			get
			{
				return submissionResponse;
			}
		}


		//  -------------------------------------------------------------------
		/// <summary>
		/// Submits a project.
		/// </summary>
		/// <param name="manifest">
		/// A SubmissionManifest that describes the items to be submitted and
		/// where they should be sent.
		/// </param>
		public void SubmitProject(SubmissionManifest manifest)
		{
			hasResponse = false;
			submissionResponse = null;

			string[] missingFiles = VerifyRequiredFiles(
				manifest.Assignment, manifest.SubmittableItems);

			if(missingFiles != null)
			{
				throw new RequiredFilesMissingException(missingFiles);
			}

			Uri transport = manifest.ResolvedTransport;

			IProtocol protocol =
				ProtocolRegistry.CreateProtocolInstance(transport.Scheme);

			if (protocol != null)
			{
				protocol.Submit(manifest);

				if (protocol.HasResponse)
				{
					hasResponse = true;
					submissionResponse = protocol.SubmissionResponse;
				}
			}
			else
			{
				throw new ProtocolNotRegisteredException(transport.Scheme);
			}
		}


		//  -------------------------------------------------------------------
		private string[] VerifyRequiredFiles(ITargetAssignment assignment,
			ISubmittableItem[] items)
		{
			Dictionary<string, bool> requiredFiles =
				new Dictionary<string, bool>();
			
			string[] patterns = assignment.AllRequiredFiles;
			foreach(string pattern in patterns)
				requiredFiles.Add(pattern, false);

			foreach (ISubmittableItem item in
				new DepthFirstTraversal<ISubmittableItem>(items,
				delegate(ISubmittableItem i) { return i.Children; }))
			{
				if (item.Kind == SubmittableItemKind.File)
				{
					foreach (string reqPattern in patterns)
					{
						FilePattern pattern = new FilePattern(reqPattern);
						if(pattern.Matches(item.Filename))
						{
							requiredFiles[reqPattern] = true;
						}
					}
				}
			}

			List<string> missingFiles = new List<string>();
			foreach (string requiredFile in requiredFiles.Keys)
			{
				if (requiredFiles[requiredFile] == false)
				{
					missingFiles.Add(requiredFile);
				}
			}

			if (missingFiles.Count == 0)
			{
				return null;
			}
			else
			{
				return missingFiles.ToArray();
			}
		}


		// ==== Fields ========================================================

		// The root of the submission target object tree.
		private ITargetRoot root;

		// Indicates whether the submission generated a response.
		private bool hasResponse;

		// Contains the response generated by the submission, if any.
		private string submissionResponse;
	}
}
