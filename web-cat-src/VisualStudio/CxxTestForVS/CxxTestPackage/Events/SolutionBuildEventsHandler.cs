/*==========================================================================*\
 |  $Id: SolutionBuildEventsHandler.cs,v 1.1 2008/06/02 23:27:38 aallowat Exp $
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of the Web-CAT CxxTest integration package for Visual
 |	Studio.NET.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.TextManager.Interop;
using Microsoft.VisualStudio.VCCodeModel;
using Microsoft.VisualStudio.VCProject;
using Microsoft.VisualStudio.VCProjectEngine;
using EnvDTE;

namespace WebCAT.CxxTest.VisualStudio.Events
{
	// --------------------------------------------------------------------
    /// <summary>
    /// A class that listens for and handles events generated by the Visual
	/// Studio build process.
    /// </summary>
    public class SolutionBuildEventsHandler : IVsUpdateSolutionEvents
    {
		//~ Properties .......................................................

		// ------------------------------------------------------
		/// <summary>
		/// Gets or sets a value indicating that the build was initiated as a
		/// result of the user requesting that test suites in the project be
		/// executed.
		/// </summary>
		public bool BuildingForTestLaunch
		{
			get
			{
				return buildingForTestLaunch;
			}
			set
			{
				buildingForTestLaunch = value;
			}
		}


		//~ Methods ..........................................................

		// ------------------------------------------------------
		/// <summary>
		/// Called when the active project configuration in the IDE changes.
		/// </summary>
		/// <param name="hierarchy">
		/// The project hierarchy whose configuration was changed, or null if
		/// the change affects all projects.
		/// </param>
		/// <returns>
		/// S_OK if successful, otherwise an error code.
		/// </returns>
		public int OnActiveProjectCfgChange(IVsHierarchy hierarchy)
        {
            return VSConstants.S_OK;
        }


		// ------------------------------------------------------
        /// <summary>
        /// Called when the build process begins.
        /// </summary>
        /// <param name="cancelUpdate">
		/// A reference parameter that should be set to 1 if the build process
		/// should be canceled.
		/// </param>
        /// <returns>
		/// S_OK if successful, otherwise an error code.
		/// </returns>
        public int UpdateSolution_Begin(ref int cancelUpdate)
        {
            if (!buildingForTestLaunch)
            {
				// Only create a test runner file if there were any suites
				// found in the project; that way non-CxxTest projects aren't
				// affected by this package.

				if (CxxTestPackage.Instance.AllTestSuites.Suites.Length > 0)
					CxxTestPackage.Instance.CreateTestRunnerFile(true);
            }

			return VSConstants.S_OK;
		}


		// ------------------------------------------------------
        /// <summary>
        /// Called when the build process is completed.
        /// </summary>
        /// <param name="success">
		/// 1 if the build was successful, otherwise 0.
		/// </param>
        /// <param name="modified">
		/// 1 if any update action succeeded, otherwise 0.
		/// </param>
        /// <param name="cancel">
		/// 1 if the build was canceled, otherwise 0.
		/// </param>
        /// <returns>
		/// S_OK if successful, otherwise an error code.
		/// </returns>
        public int UpdateSolution_Done(int success, int modified, int cancel)
        {
			if (!buildingForTestLaunch)
			{
				CxxTestPackage.Instance.TryToRefreshTestSuitesWindow();
			}
			else
			{
				if (success == 1)
					CxxTestPackage.Instance.LaunchTests();
				else
					CxxTestPackage.Instance.BringErrorListToFront();
			}

			buildingForTestLaunch = false;

			return VSConstants.S_OK;
		}


		// ------------------------------------------------------
        /// <summary>
        /// Called when the first project configuration is about to be built.
        /// </summary>
        /// <param name="cancel">
		/// A reference parameter that should be set to 1 to cancel the
		/// update.
		/// </param>
        /// <returns>
		/// S_OK if successful, otherwise an error code.
		/// </returns>
        public int UpdateSolution_StartUpdate(ref int cancel)
        {
			return VSConstants.S_OK;
		}


		// ------------------------------------------------------
        /// <summary>
        /// Called when the build is canceled.
        /// </summary>
        /// <returns>
		/// S_OK if successful, otherwise an error code.
		/// </returns>
        public int UpdateSolution_Cancel()
        {
			return VSConstants.S_OK;
		}


		//~ Instance variables ...............................................

		// Indicates that the build was initiated as a result of the user
		// requesting that test suites in the project be executed.
		private bool buildingForTestLaunch;
	}
}
